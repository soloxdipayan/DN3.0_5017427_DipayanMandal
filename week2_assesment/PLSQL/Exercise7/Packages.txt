# Scenario 1: Group all customer-related procedures and functions into a package.
## 	Question: Create a package CustomerManagement with procedures for adding a new customer, updating customer details, and a function to get customer balance.
## Answer
Package Specification:
```sql
CREATE OR REPLACE PACKAGE CustomerManagement AS
    PROCEDURE AddNewCustomer(
        p_CustomerID IN Customers.CustomerID%TYPE,
        p_Name IN Customers.Name%TYPE,
        p_DOB IN Customers.DOB%TYPE,
        p_Balance IN Customers.Balance%TYPE,
        p_LastModified IN Customers.LastModified%TYPE
    );

    PROCEDURE UpdateCustomerDetails(
        p_CustomerID IN Customers.CustomerID%TYPE,
        p_Name IN Customers.Name%TYPE,
        p_DOB IN Customers.DOB%TYPE,
        p_Balance IN Customers.Balance%TYPE
    );

    FUNCTION GetCustomerBalance(
        p_CustomerID IN Customers.CustomerID%TYPE
    ) RETURN NUMBER;
END CustomerManagement;
/
```
Package Body:

```sql
CREATE OR REPLACE PACKAGE BODY CustomerManagement AS
    PROCEDURE AddNewCustomer(
        p_CustomerID IN Customers.CustomerID%TYPE,
        p_Name IN Customers.Name%TYPE,
        p_DOB IN Customers.DOB%TYPE,
        p_Balance IN Customers.Balance%TYPE,
        p_LastModified IN Customers.LastModified%TYPE
    ) IS
    BEGIN
        INSERT INTO Customers (CustomerID, Name, DOB, Balance, LastModified)
        VALUES (p_CustomerID, p_Name, p_DOB, p_Balance, p_LastModified);
        COMMIT;
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            DBMS_OUTPUT.PUT_LINE('Customer ID ' || p_CustomerID || ' already exists.');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
    END AddNewCustomer;

    PROCEDURE UpdateCustomerDetails(
        p_CustomerID IN Customers.CustomerID%TYPE,
        p_Name IN Customers.Name%TYPE,
        p_DOB IN Customers.DOB%TYPE,
        p_Balance IN Customers.Balance%TYPE
    ) IS
    BEGIN
        UPDATE Customers
        SET Name = p_Name, DOB = p_DOB, Balance = p_Balance, LastModified = SYSDATE
        WHERE CustomerID = p_CustomerID;
        COMMIT;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Customer ID ' || p_CustomerID || ' does not exist.');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
    END UpdateCustomerDetails;

    FUNCTION GetCustomerBalance(
        p_CustomerID IN Customers.CustomerID%TYPE
    ) RETURN NUMBER IS
        v_Balance Customers.Balance%TYPE;
    BEGIN
        SELECT Balance INTO v_Balance
        FROM Customers
        WHERE CustomerID = p_CustomerID;
        RETURN v_Balance;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN NULL;
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
            RETURN NULL;
    END GetCustomerBalance;
END CustomerManagement;
/
```


# Scenario 2: Create a package to manage employee data.
## Question: Write a package EmployeeManagement with procedures to hire new employees, update employee details, and a function to calculate annual salary.
## Answer
Package Specification:
```sql
CREATE OR REPLACE PACKAGE EmployeeManagement AS
    PROCEDURE HireEmployee(
        p_EmployeeID IN Employees.EmployeeID%TYPE,
        p_Name IN Employees.Name%TYPE,
        p_Position IN Employees.Position%TYPE,
        p_Salary IN Employees.Salary%TYPE,
        p_Department IN Employees.Department%TYPE,
        p_HireDate IN Employees.HireDate%TYPE
    );

    PROCEDURE UpdateEmployeeDetails(
        p_EmployeeID IN Employees.EmployeeID%TYPE,
        p_Name IN Employees.Name%TYPE,
        p_Position IN Employees.Position%TYPE,
        p_Salary IN Employees.Salary%TYPE,
        p_Department IN Employees.Department%TYPE
    );

    FUNCTION CalculateAnnualSalary(
        p_EmployeeID IN Employees.EmployeeID%TYPE
    ) RETURN NUMBER;
END EmployeeManagement;
/
```
Package Body:
```sql
CREATE OR REPLACE PACKAGE BODY EmployeeManagement AS
    PROCEDURE HireEmployee(
        p_EmployeeID IN Employees.EmployeeID%TYPE,
        p_Name IN Employees.Name%TYPE,
        p_Position IN Employees.Position%TYPE,
        p_Salary IN Employees.Salary%TYPE,
        p_Department IN Employees.Department%TYPE,
        p_HireDate IN Employees.HireDate%TYPE
    ) IS
    BEGIN
        INSERT INTO Employees (EmployeeID, Name, Position, Salary, Department, HireDate)
        VALUES (p_EmployeeID, p_Name, p_Position, p_Salary, p_Department, p_HireDate);
        COMMIT;
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            DBMS_OUTPUT.PUT_LINE('Employee ID ' || p_EmployeeID || ' already exists.');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
    END HireEmployee;

    PROCEDURE UpdateEmployeeDetails(
        p_EmployeeID IN Employees.EmployeeID%TYPE,
        p_Name IN Employees.Name%TYPE,
        p_Position IN Employees.Position%TYPE,
        p_Salary IN Employees.Salary%TYPE,
        p_Department IN Employees.Department%TYPE
    ) IS
    BEGIN
        UPDATE Employees
        SET Name = p_Name, Position = p_Position, Salary = p_Salary, Department = p_Department
        WHERE EmployeeID = p_EmployeeID;
        COMMIT;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Employee ID ' || p_EmployeeID || ' does not exist.');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
    END UpdateEmployeeDetails;

    FUNCTION CalculateAnnualSalary(
        p_EmployeeID IN Employees.EmployeeID%TYPE
    ) RETURN NUMBER IS
        v_Salary Employees.Salary%TYPE;
    BEGIN
        SELECT Salary INTO v_Salary
        FROM Employees
        WHERE EmployeeID = p_EmployeeID;
        RETURN v_Salary * 12;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN NULL;
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
            RETURN NULL;
    END CalculateAnnualSalary;
END EmployeeManagement;
/
```



# Scenario 3: Group all account-related operations into a package.
## 	Question: Create a package AccountOperations with procedures for opening a new account, closing an account, and a function to get the total balance of a customer across all accounts.
## Answer
Package Specification:
```sql
CREATE OR REPLACE PACKAGE AccountOperations AS
    PROCEDURE OpenAccount(
        p_AccountID IN Accounts.AccountID%TYPE,
        p_CustomerID IN Accounts.CustomerID%TYPE,
        p_AccountType IN Accounts.AccountType%TYPE,
        p_Balance IN Accounts.Balance%TYPE,
        p_LastModified IN Accounts.LastModified%TYPE
    );

    PROCEDURE CloseAccount(
        p_AccountID IN Accounts.AccountID%TYPE
    );

    FUNCTION GetTotalBalance(
        p_CustomerID IN Accounts.CustomerID%TYPE
    ) RETURN NUMBER;
END AccountOperations;
/
```
Package Body:
```sql
CREATE OR REPLACE PACKAGE BODY AccountOperations AS
    PROCEDURE OpenAccount(
        p_AccountID IN Accounts.AccountID%TYPE,
        p_CustomerID IN Accounts.CustomerID%TYPE,
        p_AccountType IN Accounts.AccountType%TYPE,
        p_Balance IN Accounts.Balance%TYPE,
        p_LastModified IN Accounts.LastModified%TYPE
    ) IS
    BEGIN
        INSERT INTO Accounts (AccountID, CustomerID, AccountType, Balance, LastModified)
        VALUES (p_AccountID, p_CustomerID, p_AccountType, p_Balance, p_LastModified);
        COMMIT;
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            DBMS_OUTPUT.PUT_LINE('Account ID ' || p_AccountID || ' already exists.');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
    END OpenAccount;

    PROCEDURE CloseAccount(
        p_AccountID IN Accounts.AccountID%TYPE
    ) IS
    BEGIN
        DELETE FROM Accounts
        WHERE AccountID = p_AccountID;
        COMMIT;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Account ID ' || p_AccountID || ' does not exist.');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
    END CloseAccount;

    FUNCTION GetTotalBalance(
        p_CustomerID IN Accounts.CustomerID%TYPE
    ) RETURN NUMBER IS
        v_TotalBalance NUMBER;
    BEGIN
        SELECT SUM(Balance) INTO v_TotalBalance
        FROM Accounts
        WHERE CustomerID = p_CustomerID;
        RETURN v_TotalBalance;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN NULL;
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
            RETURN NULL;
    END GetTotalBalance;
END AccountOperations;
/
```